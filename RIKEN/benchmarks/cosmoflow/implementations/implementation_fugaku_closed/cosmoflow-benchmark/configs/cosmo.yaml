output_dir: results/cosmo-000

mlperf:
    org: Fujitsu
    division: closed
    status: cloud
    platform: abci_{}xV100_tensorflow
    poc_name: Koichi Shirahata
    poc_email: k.shirahata@fujitsu.com

data:
    name: cosmo
    data_dir: /data/g9300001/MLPerf/cosmoUniverse_2019_05_4parE_tf
    n_train: 262144
    n_valid: 65536
    sample_shape: [128, 128, 128, 4]
    batch_size: 4
    n_epochs: 128
    shard: True
    apply_log: True
    prefetch: 4

model:
    name: mesh_cosmoflow
    input_shape: [128, 128, 128, 4]
    target_size: 4
    conv_size: 32
    fc1_size: 128
    fc2_size: 64
    hidden_activation: LeakyReLU
    pooling_type: MaxPool3D
    dropout: 0.5
    use_conv_bias: True
    mesh_shape: [2, 2]

optimizer:
    name: SGDWD
    momentum: 0.9
    weight_decay: 1.0e-6

    #name: Adam
    #epsilon: 1.0e-8

lr_schedule:
    # Standard linear LR scaling configuration, tested up to batch size 1024
    #base_lr: 0.001
    #scaling: linear
    #base_batch_size: 64

    # Alternate sqrt LR scaling which has worked well for batch size 512-1024.
    base_lr: 0.002
    scaling: sqrt
    base_batch_size: 32

    n_warmup_epochs: 4
    warmup_factor: -1  # initial value is peak_lr * warmup_factor. If negative value is set, initial value is base_lr (traditional behavior)

    # You may want to adjust these decay epochs depending on your batch size.
    # E.g. if training batch size 64 you may want to decay at 16 and 32 epochs.
    decay_schedule:
        name: step
        32: 0.25
        64: 0.125

        #name: poly
        #n_decay_epochs: 100
        #end_factor: 0.01
        #power: 1

        #name: cos
        #n_decay_epochs: 100
        #end_factor: 0.01

        #name: htd
        #n_decay_epochs: 100
        #end_factor: 0.01
        #L: -6
        #U: 3

        #name: natan
        #n_decay_epochs: 100
        #end_factor: 0.01
        #turn_epoch: 80

train:
    loss: mse
    metrics: ['mae']
    early_stopping_patience: 8
